diff --git a/js/src/xpconnect/src/xpcwrappednative.cpp b/js/src/xpconnect/src/xpcwrappednative.cpp
--- a/js/src/xpconnect/src/xpcwrappednative.cpp
+++ b/js/src/xpconnect/src/xpcwrappednative.cpp
@@ -2202,19 +2202,28 @@ GetInterfaceTypeFromParam(XPCCallContext
 }
 
 /***************************************************************************/
 
 class CallMethodHelper
 {
     XPCCallContext* const mCallContext;
     nsAutoTArray<nsXPTCVariant, 8> mDispatchParams;
+
+    // Reserve space for one nsAutoString. We don't want the string itself
+    // to be declared as that would make the ctor and dtors run for each
+    // CallMethodHelper instantiation, and they're only needed in a
+    // fraction of all the calls that come through here.
+    char mAutoString[sizeof(nsAutoString)];
+    PRBool mAutoStringUsed;
+
 public:
     CallMethodHelper(XPCCallContext* ccx)
         : mCallContext(ccx)
+        , mAutoStringUsed(PR_FALSE)
     {}
     JSBool Call();
 };
 
 // static
 NS_SUPPRESS_STACK_CHECK JSBool
 XPCWrappedNative::CallMethod(XPCCallContext& ccx,
                              CallMode mode /*= CALL_METHOD */)
@@ -2276,24 +2285,16 @@ XPCWrappedNative::CallMethod(XPCCallCont
     return CallMethodHelper(&ccx).Call();
 }
 
 JSBool
 CallMethodHelper::Call()
 {
     // From here on ALL exits are through 'goto done;'
 
-    // Reserve space on the stack for one nsAutoString. We don't want
-    // the string itself to be declared on the stack as that would
-    // make the ctor and dtors run for each pass through this code,
-    // and they're only needed in a fraction of all the calls that
-    // come through here.
-    char autoString[sizeof(nsAutoString)];
-    PRBool autoStringUsed = PR_FALSE;
-
     JSBool retval = JS_FALSE;
 
     uint8 i;
     const nsXPTMethodInfo* methodInfo;
     uint8 requiredArgs;
     uint8 paramCount;
     uint8 wantsOptArgc;
     uint8 optArgcIndex = PR_UINT8_MAX;
@@ -2490,25 +2491,25 @@ CallMethodHelper::Call()
 
                 case nsXPTType::T_DOMSTRING:
                     if(paramInfo.IsDipper())
                     {
                         // Is an 'out' DOMString. Make a new nsAString
                         // now and then continue in order to skip the call to
                         // JSData2Native
 
-                        if(!autoStringUsed)
+                        if(!mAutoStringUsed)
                         {
                             // Our stack space for an nsAutoString is
                             // still available, initialize the string
                             // object (using placement new) and use
                             // it.
-                            nsAutoString *s = (nsAutoString*)&autoString;
+                            nsAutoString *s = (nsAutoString*)&mAutoString;
                             new (s) nsAutoString();
-                            autoStringUsed = PR_TRUE;
+                            mAutoStringUsed = PR_TRUE;
 
                             // Don't call SetValIsDOMString because we don't 
                             // want to delete this pointer.
                             dp->val.p = s;
                             continue;
                         }
 
                         dp->SetValIsDOMString();
@@ -2943,20 +2944,20 @@ done:
                 mCallContext->DeleteString((nsAString*)p);
             else if(dp->IsValUTF8String())
                 delete (nsCString*) p;
             else if(dp->IsValCString())
                 delete (nsCString*) p;
         }   
     }
 
-    if (autoStringUsed) {
+    if (mAutoStringUsed) {
         // Our stack based nsAutoString was used, clean it up.
 
-        nsAutoString *s = (nsAutoString*)&autoString;
+        nsAutoString *s = (nsAutoString*)&mAutoString;
 
         s->~nsAutoString();
     }
 
     return retval;
 }
 
 /***************************************************************************/
